Introduction to Java:
	Java is Object Oriented Language.
	The Java codes are first compiled into byte code i.e. machine-independent code. Then the byte code runs on Java Virtual Machine i.e. JVM regardless of the underlying architecture.
	Java codes are always written in the form of classes and objects.
	Java is platform-independent language.
	
Java Terminology:
	1. Java Virtual Machine - is used to execute the bytecode produced by the compiler.
	2. Bytecode: Javac compiler of JDK compiles the java source code into bytecode.
	3. Java Development Kit: that includes everything including compiler, Java Runtime Environment i.e. JRE, java debuggers, java docs, etc.
	4. Java Runtime Environment: allows the java program to run, however, we cannot compile it.
	5. Garbage Collector: used to delete or recollect the objects that are not referenced.
	6. ClassPath: the file path where the java runtime and java compiler look for .class files to load.

Features of Java:
	1. Platform Independent: Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of bytecode.
	2. Object-Oriented Programming: Organizing the program in the terms of collection of objects.
		Concepts of Object-Oriented programming are:
			Abstraction
			Encapsulation
			Inheritance
			Polymorphism
	3. Java is one of the simple language.
	4. Robust: Java is robust which means reliable. Features that make it robust are garbage collection, Exception handling and memory allocation.
	5. Secure: Programs run in an environment that is independent of the os environment which makes java programs more secure.
	6. Distributed: Programs can be easily distributed on one or more systems that are connected to each other through an internet connection. Remote Method Invocation and Enterprise Java Beans are used.
	7. Mutithreading: allows concurrent execution of two or more parts of a program for maximum utilization of the CPU.
	8. High Performance: Java uses Just In Time i.e. JIT compiler where the compiler compiles code on-demand basics where it only compiles those methods that are called making applications to execute faster.
	9. Dynamic flexibility: Java being completely object-oriented gives us the flexibility to add classes, new methods to existing classes and even create new classes through sub-classes.
	10. Sandbox Execution: Programs run in a separate space that allows user to execute their applications without affecting the underlying system with help of a bytecode verifier.

Java Welcome Program Explanation:
	1. class: is a keyword to declare that a new class is being defined.
	2. Welcome: is an identifier i.e the name of the class and the entire class definition and its members, will be between the { and }.
	3. public: JVM can execute the method from anywhere.
	4. static: main method is to be called without an object.
	5. void: method which doesn't return anything.
	6. main(): is configured in JVM and compiler executes the code starting always from the main function.
	7. String[]: main method accepts single argument i.e. String type array.
	8. System.out.println("Welcome"): prints the Welcome text. System is a predefined class which provides access to the system, out is the variable of type output stream connected to the console and println() method accomplished for output.

Java Identifier:
	In java, an identifier can be a class name, method name, variable name or label.
	Rules for defining Java identifiers:
		1. All alphanumeric characters are allowed (A-Z, a-z, 0-9, $ and _).
		2. Should not start with digits.
		3. Identifiers are case-sensitive (Abc and abc are different).
		4. No limit on the identifier length but it is advisale to use 4 to 15 letters.
		5. Keywords or Reserved words can't be used as an identifier.